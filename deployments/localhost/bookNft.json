{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC721",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "bookBought",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bookId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bookId",
          "type": "uint256"
        }
      ],
      "name": "calcTotalPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_percent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bookId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "listBook",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x61469eac4ccd7922be7ee11f6235784c99c79b7ba158c902599bd190823d1709",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "677476",
    "logsBloom": "0x
    "blockHash": "0x4d978d5683350adbaeb10ef55224bbd932d4bf81a384d210260be5bcd1f429a5",
    "transactionHash": "0x61469eac4ccd7922be7ee11f6235784c99c79b7ba158c902599bd190823d1709",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "677476",
    "status": 1,
    "byzantium": true
  },
  "args": [
    30
  ],
  "numDeployments": 1,
  "solcInputHash": "5fe7686abfc778f707a7d099c1ba2069",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"bookBought\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bookId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bookId\",\"type\":\"uint256\"}],\"name\":\"calcTotalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bookId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listBook\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/book_Nft.sol\":\"bookNft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/book_Nft.sol\":{\"content\":\" // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n \\ncontract bookNft {\\n    address payable immutable i_feeAddress;\\n    uint public immutable i_percent;\\n    uint256 itemCount;\\n\\nconstructor (uint _feePercent){\\n    i_feeAddress = payable (msg.sender);\\n    i_percent = _feePercent;\\n}\\n\\n\\n\\n    struct book {\\n        uint256 bookId;\\n        IERC721 nft;\\n        uint256 price;\\n        uint256 tokenId;\\n        address payable seller;\\n        bool sold;\\n    }\\n\\n\\n\\n\\n\\n   \\n\\n    event bookBought(\\n        address indexed buyer,\\n        IERC721 indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 price\\n    );\\n\\n    mapping( uint256 => book) private bookMapping;\\n \\n\\n     \\n   \\n \\n    function listBook(\\n        IERC721 nftAddress,\\n        uint256 _bookId,\\n        uint256 _price\\n    )\\n     external\\n     returns (uint256)\\n        \\n\\n    {\\n        require (_price >0, \\\"price should be greater than zero\\\");\\n        itemCount ++;\\n         nftAddress.transferFrom (msg.sender, address (this),_bookId);\\n        bookMapping[_bookId]= book (itemCount,nftAddress,_price,_bookId,payable(msg.sender),false);\\n\\n        return itemCount;\\n    }\\n\\n     \\n\\n\\n\\n\\n \\n    \\n\\n\\n    function buyItem(uint256 bookId)\\n        external\\n        payable\\n    \\n\\n    {\\n         uint256 totalPrice = calcTotalPrice (bookId);\\n        book memory bookFound = bookMapping[bookId];\\n        require (msg.value < totalPrice, \\\"not enough money \\\");\\n        bookFound.seller.transfer (bookFound.price);\\n        i_feeAddress.transfer(totalPrice- bookFound.price);\\n        bookFound.nft.safeTransferFrom(address(this), msg.sender,bookFound.tokenId);\\n        emit bookBought(msg.sender, bookFound.nft, bookFound.tokenId, bookFound.price);\\n    }\\n\\n    \\n    function calcTotalPrice (uint256 bookId) public view  returns (uint256){\\n        return bookMapping [bookId].price * (100 + i_percent/100);\\n\\n    }\\n     \\n\\n\\n    \\n  \\n \\n}\",\"keccak256\":\"0x2beaf438551a4a7a845670757a1522da3de296698fca94686043c381f3a6caa2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610c55380380610c558339818101604052810190610032919061008c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508060a08181525050506100df565b600081519050610086816100c8565b92915050565b6000602082840312156100a2576100a16100c3565b5b60006100b084828501610077565b91505092915050565b6000819050919050565b600080fd5b6100d1816100b9565b81146100dc57600080fd5b50565b60805160601c60a051610b4761010e6000396000818161010b0152610380015260006105490152610b476000f3fe60806040526004361061003f5760003560e01c80635bae9f73146100445780637e8ddbbb14610081578063e6ba9935146100be578063e7fb74c7146100e9575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610728565b610105565b6040516100789190610830565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a391906106d5565b610168565b6040516100b59190610830565b60405180910390f35b3480156100ca57600080fd5b506100d361037e565b6040516100e09190610830565b60405180910390f35b61010360048036038101906100fe9190610728565b6103a2565b005b600060647f000000000000000000000000000000000000000000000000000000000000000061013491906108b2565b6064610140919061085c565b600160008481526020019081526020016000206002015461016191906108e3565b9050919050565b60008082116101ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a390610810565b60405180910390fd5b6000808154809291906101be906109bf565b91905055508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610200939291906107b9565b600060405180830381600087803b15801561021a57600080fd5b505af115801561022e573d6000803e3d6000fd5b505050506040518060c0016040528060005481526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018481526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600160008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555090505060005490509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006103ad82610105565b90506000600160008481526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff16151515158152505090508134106104f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ef906107f0565b60405180910390fd5b806080015173ffffffffffffffffffffffffffffffffffffffff166108fc82604001519081150290604051600060405180830381858888f19350505050158015610546573d6000803e3d6000fd5b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc826040015184610591919061093d565b9081150290604051600060405180830381858888f193505050501580156105bc573d6000803e3d6000fd5b50806020015173ffffffffffffffffffffffffffffffffffffffff166342842e0e303384606001516040518463ffffffff1660e01b8152600401610602939291906107b9565b600060405180830381600087803b15801561061c57600080fd5b505af1158015610630573d6000803e3d6000fd5b505050508060600151816020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7c8b36c6ac32bb71a131a446540d5148538180e5553821c81334b06d5b9d5969846040015160405161069e9190610830565b60405180910390a4505050565b6000813590506106ba81610ae3565b92915050565b6000813590506106cf81610afa565b92915050565b6000806000606084860312156106ee576106ed610a66565b5b60006106fc868287016106ab565b935050602061070d868287016106c0565b925050604061071e868287016106c0565b9150509250925092565b60006020828403121561073e5761073d610a66565b5b600061074c848285016106c0565b91505092915050565b61075e81610971565b82525050565b600061077160118361084b565b915061077c82610a6b565b602082019050919050565b600061079460218361084b565b915061079f82610a94565b604082019050919050565b6107b3816109b5565b82525050565b60006060820190506107ce6000830186610755565b6107db6020830185610755565b6107e860408301846107aa565b949350505050565b6000602082019050818103600083015261080981610764565b9050919050565b6000602082019050818103600083015261082981610787565b9050919050565b600060208201905061084560008301846107aa565b92915050565b600082825260208201905092915050565b6000610867826109b5565b9150610872836109b5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108a7576108a6610a08565b5b828201905092915050565b60006108bd826109b5565b91506108c8836109b5565b9250826108d8576108d7610a37565b5b828204905092915050565b60006108ee826109b5565b91506108f9836109b5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561093257610931610a08565b5b828202905092915050565b6000610948826109b5565b9150610953836109b5565b92508282101561096657610965610a08565b5b828203905092915050565b600061097c82610995565b9050919050565b600061098e82610971565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006109ca826109b5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109fd576109fc610a08565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f6e6f7420656e6f756768206d6f6e657920000000000000000000000000000000600082015250565b7f70726963652073686f756c642062652067726561746572207468616e207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b610aec81610983565b8114610af757600080fd5b50565b610b03816109b5565b8114610b0e57600080fd5b5056fea264697066735822122069eed53bf942d6ad624e29498f9ea5dad1cb42957020069496d05ff0a0f2120764736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80635bae9f73146100445780637e8ddbbb14610081578063e6ba9935146100be578063e7fb74c7146100e9575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610728565b610105565b6040516100789190610830565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a391906106d5565b610168565b6040516100b59190610830565b60405180910390f35b3480156100ca57600080fd5b506100d361037e565b6040516100e09190610830565b60405180910390f35b61010360048036038101906100fe9190610728565b6103a2565b005b600060647f000000000000000000000000000000000000000000000000000000000000000061013491906108b2565b6064610140919061085c565b600160008481526020019081526020016000206002015461016191906108e3565b9050919050565b60008082116101ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a390610810565b60405180910390fd5b6000808154809291906101be906109bf565b91905055508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610200939291906107b9565b600060405180830381600087803b15801561021a57600080fd5b505af115801561022e573d6000803e3d6000fd5b505050506040518060c0016040528060005481526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018481526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600160008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555090505060005490509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006103ad82610105565b90506000600160008481526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff16151515158152505090508134106104f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ef906107f0565b60405180910390fd5b806080015173ffffffffffffffffffffffffffffffffffffffff166108fc82604001519081150290604051600060405180830381858888f19350505050158015610546573d6000803e3d6000fd5b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc826040015184610591919061093d565b9081150290604051600060405180830381858888f193505050501580156105bc573d6000803e3d6000fd5b50806020015173ffffffffffffffffffffffffffffffffffffffff166342842e0e303384606001516040518463ffffffff1660e01b8152600401610602939291906107b9565b600060405180830381600087803b15801561061c57600080fd5b505af1158015610630573d6000803e3d6000fd5b505050508060600151816020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7c8b36c6ac32bb71a131a446540d5148538180e5553821c81334b06d5b9d5969846040015160405161069e9190610830565b60405180910390a4505050565b6000813590506106ba81610ae3565b92915050565b6000813590506106cf81610afa565b92915050565b6000806000606084860312156106ee576106ed610a66565b5b60006106fc868287016106ab565b935050602061070d868287016106c0565b925050604061071e868287016106c0565b9150509250925092565b60006020828403121561073e5761073d610a66565b5b600061074c848285016106c0565b91505092915050565b61075e81610971565b82525050565b600061077160118361084b565b915061077c82610a6b565b602082019050919050565b600061079460218361084b565b915061079f82610a94565b604082019050919050565b6107b3816109b5565b82525050565b60006060820190506107ce6000830186610755565b6107db6020830185610755565b6107e860408301846107aa565b949350505050565b6000602082019050818103600083015261080981610764565b9050919050565b6000602082019050818103600083015261082981610787565b9050919050565b600060208201905061084560008301846107aa565b92915050565b600082825260208201905092915050565b6000610867826109b5565b9150610872836109b5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108a7576108a6610a08565b5b828201905092915050565b60006108bd826109b5565b91506108c8836109b5565b9250826108d8576108d7610a37565b5b828204905092915050565b60006108ee826109b5565b91506108f9836109b5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561093257610931610a08565b5b828202905092915050565b6000610948826109b5565b9150610953836109b5565b92508282101561096657610965610a08565b5b828203905092915050565b600061097c82610995565b9050919050565b600061098e82610971565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006109ca826109b5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109fd576109fc610a08565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f6e6f7420656e6f756768206d6f6e657920000000000000000000000000000000600082015250565b7f70726963652073686f756c642062652067726561746572207468616e207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b610aec81610983565b8114610af757600080fd5b50565b610b03816109b5565b8114610b0e57600080fd5b5056fea264697066735822122069eed53bf942d6ad624e29498f9ea5dad1cb42957020069496d05ff0a0f2120764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2667,
        "contract": "contracts/book_Nft.sol:bookNft",
        "label": "itemCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2715,
        "contract": "contracts/book_Nft.sol:bookNft",
        "label": "bookMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(book)2699_storage)"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC721)1060": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(book)2699_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct bookNft.book)",
        "numberOfBytes": "32",
        "value": "t_struct(book)2699_storage"
      },
      "t_struct(book)2699_storage": {
        "encoding": "inplace",
        "label": "struct bookNft.book",
        "members": [
          {
            "astId": 2687,
            "contract": "contracts/book_Nft.sol:bookNft",
            "label": "bookId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2690,
            "contract": "contracts/book_Nft.sol:bookNft",
            "label": "nft",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC721)1060"
          },
          {
            "astId": 2692,
            "contract": "contracts/book_Nft.sol:bookNft",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2694,
            "contract": "contracts/book_Nft.sol:bookNft",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2696,
            "contract": "contracts/book_Nft.sol:bookNft",
            "label": "seller",
            "offset": 0,
            "slot": "4",
            "type": "t_address_payable"
          },
          {
            "astId": 2698,
            "contract": "contracts/book_Nft.sol:bookNft",
            "label": "sold",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}